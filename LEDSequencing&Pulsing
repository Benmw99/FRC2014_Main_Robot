    //*****************************************************************************/
    //*****************************************************************************/
    // Title: Arduino LED Synchronization Breathing and Pulsation Code
    // Author: Brandon Spirito
    // Date: 2/18/2014
    // Revision: 1
    //
    // Description: This code uses LPD8806-based RGB LED Modules in a strip with a main 
    // objective to provides the driver, shooter, and other team members or friendlies 
    // with visual cues to easily identify articulation movements and other various 
    // components on our 2168 competition robot.
    //
    //
    // 
    //*****************************************************************************/
    //*****************************************************************************/
    
    #include "LPD8806.h"
    #include "SPI.h"
    
    
    // Two LED strips with 8 LEDs per each strip located on the Intake Arm at the rear 
    // of the robot.
    //**These LED strips will be used to tell the driver when the Intake arm is down and 
    // ready to receive a ball.
    //**They will also be used to tell the driver when the intake arm is up.
    
    // 
    
    
    // Choose which 2 pins you will use for output.
    // Can be any valid output pins.
    int dataPin = 2;   
    int clockPin = 3;

    // Set the first variable to the NUMBER of pixels. 32 = 32 pixels in a row
    // The LED strips are 32 LEDs per meter but you can extend/cut the strip
    //LPD8806 strip = LPD8806(8, dataPin, clockPin);

    // you can also use hardware SPI, for ultra fast writes by leaving out the
    // data and clock pin arguments. This will 'fix' the pins to the following:
    // on Arduino 168/328 thats data = 11, and clock = pin 13
    // on Megas thats data = 51, and clock = 52
    
    int stripLength = 8; // Number of RGB LEDs in strand
    LPD8806 strip = LPD8806(stripLength);

    // Brightness Table 
    uint8_t LED_Breathe_Table[]  = {  202, 211, 220, 228, 236, 242, 247, 251, 254, 255, 255, 254, 251, 247, 242, 236,
                                      228, 220, 211, 202, 192, 182, 172, 161, 151, 141, 131, 121, 112, 103,  95,  87,  
                                       80,  73,  66, 60,  55,  50,  45,  41,  38,  34,  31,  28,  26,  24,  22,  20,  
                                       20,  20,  20, 20,  20,  20,  20,  20,  20   };

    #define BREATHE_TABLE_SIZE (sizeof(LED_Breathe_Table))
    #define BREATHE_CYCLE    700   /*breathe cycle in milliseconds*/
    #define BREATHE_UPDATE    (BREATHE_CYCLE / BREATHE_TABLE_SIZE)


    void setup() {
      // Start up the LED strip
      strip.begin();

      // Update the strip, to start they are all 'off'
      strip.show();
    }


    void loop() {
      int cycle;
      // LED pulsation
      for (cycle=0; cycle < 1; cycle++) {
        uniformBreathe(LED_Breathe_Table, BREATHE_TABLE_SIZE, BREATHE_UPDATE, 2, 2, 200);
      }
      
      // LED shifting
      for (cycle=0; cycle < 2; cycle++) {     // 200, 2, 20
        sequencedBreathe(LED_Breathe_Table, BREATHE_TABLE_SIZE, BREATHE_UPDATE, 160, 2, 170);
      }
    }

    void uniformBreathe(uint8_t* breatheTable, uint8_t breatheTableSize, uint16_t updatePeriod, uint16_t r, uint16_t g, uint16_t b)
    {
      int i;
      uint8_t breatheIndex = 0;
      uint8_t breatheRed;
      uint8_t breatheGrn;
      uint8_t breatheBlu;
     
      for (breatheIndex = 0; breatheIndex < breatheTableSize; breatheIndex++) {
        for (i=0; i < strip.numPixels(); i++) {
          breatheRed = (r * breatheTable[breatheIndex]) / 256;
          breatheGrn = (g * breatheTable[breatheIndex]) / 256;
          breatheBlu = (b * breatheTable[breatheIndex]) / 256;
          strip.setPixelColor(i, breatheRed, breatheGrn, breatheBlu);
        }
        strip.show();   // write all the pixels out
        delay(updatePeriod);
      }
    }

    void sequencedBreathe(uint8_t* breatheTable, uint8_t breatheTableSize, uint16_t updatePeriod, uint16_t r, uint16_t g, uint16_t 

b)
    {
      int i;
      uint8_t breatheIndex = 0;
      uint8_t breatheRed;
      uint8_t breatheGrn;
      uint8_t breatheBlu;
      uint8_t sequenceIndex;
     
      for (breatheIndex = 0; breatheIndex < breatheTableSize; breatheIndex++) {
        for (i=0; i < strip.numPixels(); i++) {
          sequenceIndex = (breatheIndex + (i*4)) % breatheTableSize;
          breatheRed = (r * breatheTable[sequenceIndex]) / 256;
          breatheGrn = (g * breatheTable[sequenceIndex]) / 256;
          breatheBlu = (b * breatheTable[sequenceIndex]) / 256;
          strip.setPixelColor(i, breatheRed, breatheGrn, breatheBlu);
        }
        strip.show();   // write all the pixels out
        delay(updatePeriod);
      }
    }
